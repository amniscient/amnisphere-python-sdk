# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..core.request_options import RequestOptions
from .types.model_load_model_response import ModelLoadModelResponse
from ..core.jsonable_encoder import jsonable_encoder
from ..core.pydantic_utilities import parse_obj_as
from ..errors.bad_request_error import BadRequestError
from ..errors.unauthorized_error import UnauthorizedError
from ..types.unauthorized_error_body import UnauthorizedErrorBody
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ModelClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def load_model(
        self, model_id: str, *, organization_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> ModelLoadModelResponse:
        """
        Initializes a model for inference. This endpoint must be called before running any detections.

        Parameters
        ----------
        model_id : str
            The model ID of an active and trained AI model within your organization

        organization_id : str
            Your organization identifier

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ModelLoadModelResponse
            200 - Your model was successfully loaded

        Examples
        --------
        from amniscient import AmniscientApi

        client = AmniscientApi(
            api_key="YOUR_API_KEY",
        )
        client.model.load_model(
            model_id="model_id",
            organization_id="organization_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"loadModel/{jsonable_encoder(model_id)}",
            method="POST",
            json={
                "organization_id": organization_id,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ModelLoadModelResponse,
                    parse_obj_as(
                        type_=ModelLoadModelResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        UnauthorizedErrorBody,
                        parse_obj_as(
                            type_=UnauthorizedErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncModelClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def load_model(
        self, model_id: str, *, organization_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> ModelLoadModelResponse:
        """
        Initializes a model for inference. This endpoint must be called before running any detections.

        Parameters
        ----------
        model_id : str
            The model ID of an active and trained AI model within your organization

        organization_id : str
            Your organization identifier

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ModelLoadModelResponse
            200 - Your model was successfully loaded

        Examples
        --------
        import asyncio

        from amniscient import AsyncAmniscientApi

        client = AsyncAmniscientApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.model.load_model(
                model_id="model_id",
                organization_id="organization_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"loadModel/{jsonable_encoder(model_id)}",
            method="POST",
            json={
                "organization_id": organization_id,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ModelLoadModelResponse,
                    parse_obj_as(
                        type_=ModelLoadModelResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        UnauthorizedErrorBody,
                        parse_obj_as(
                            type_=UnauthorizedErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
